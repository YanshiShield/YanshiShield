user root;
worker_processes  1;
error_log /dev/stdout debug;
events {
    worker_connections 1024;
}

env TOKEN;
env JOB_SCHEDULER_ADDRESS;

http {

    lua_shared_dict iptables 128m;

    lua_package_path "lua/?.lua;;";
    init_worker_by_lua_file 'lua/init.lua';
    client_max_body_size 1000M;

    server {
        listen GRPC_PORT http2;
        server_name  grpc.fl.com;

        location /ClientService {
            grpc_pass grpc://selector;
        }

        location / {
            rewrite_by_lua_file  'lua/router.lua';
            grpc_pass grpc://coordinator;
        }

    }

    server {
        listen HTTP_PORT;
        server_name  http.fl.com;

        location /api/v1/health {
            default_type text/html;
            content_by_lua_block {
                ngx.say("OK");
            }
        }

        location /api/v1/internal/routers {
            default_type text/html;
            content_by_lua_file 'lua/router_table.lua';
        }
    }

    upstream coordinator {
        server 0.0.0.1;
        balancer_by_lua_block {
            local ngx_balancer = require "ngx.balancer";
            ngx_balancer.set_current_peer(ngx.ctx.dest_service);
        }
    }

    upstream selector {
        server CLIENT_SELECTOR_SERVICE:CLIENT_SELECTOR_PORT;
    }

}