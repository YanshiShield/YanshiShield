#  Copyright 2022 The Neursafe FL Authors. All Rights Reserved.
#  SPDX-License-Identifier: Apache-2.0

# pylint:disable=broad-except
"""subcommmand of delete job.
"""
import sys

from absl import logging
import click

from neursafe_fl.python.cli.core.util import parse_job_id
from neursafe_fl.python.cli.core.context import PASS_CONTEXT, LOG_FILE
from neursafe_fl.python.cli.core.job import Job
from neursafe_fl.python.cli.core.model import Model


@click.group("delete", short_help="Delete federated job or model.")
def cli():
    """
     Delete job or model. \n
     Run 'nsfl-ctl delete COMMAND --help' for more information on sub-commands.
    """


@cli.command("job", short_help="Delete job.")
@click.argument("namespace")
@click.argument("job_id", required=False, default=None)
@click.option("-f", "--job-config", required=False, default=None,
              type=click.Path(exists=True, readable=True),
              help=("Local path <job-config> points to the configuration file "
                    " that used to create the federated job, which is json"
                    " format."))
@click.option("-w", "--workspace", required=False, default=None,
              type=click.Path(exists=True, readable=True),
              help=("Local path <workspace> points to the workspace/ directory"
                    " that used to create this federated job."))
@PASS_CONTEXT
def delete_job(ctx, namespace, job_id=None, job_config=None,
               workspace=None):
    """Delete job.

    \b
    Delete a federated job, you can delete the job by two ways: \n
    1. Delete job by its unique id with namespace.
    For example: \n
        nsfl-ctl delete job default job_1 \n
    Noting: The job ID is generated by server after created job. You can use
     the get command to obtain the id value of the job.

    2. Delete job by its job config with namespace.
    For example: \n
        nsfl-ctl delete job -f /path/to/job_config.json  \n
        nsfl-ctl delete job -w /path/to/workspace \n
    Noting: The job_config.json or the workspace/ is the file or directory used
     to create this federated job. Please do not change the config if you
     delete job this way.
    """
    try:
        _id = parse_job_id(job_id, job_config, workspace)
        if not _id:
            raise ValueError("Must set job_id.")

        fl_job = Job(ctx.get_api_server())
        fl_job.delete(namespace, _id)
        click.echo("Delete job %s success, you can use "
                   "'nsfl get job' to query job status." % _id)
    except Exception as err:
        logging.exception(str(err))
        click.echo("Error message: %s, the detail see %s" % (
            str(err), LOG_FILE))
        sys.exit(1)


@cli.command("model", short_help="Delete model.")
@click.argument("namespace", required=False)
@click.argument("name", required=False, default=None)
@click.argument("version", required=False, default=None)
@click.option("-id", "--model-id", default=None, required=False,
              help="The unique id of this model, you can get model's id"
                   " through get command.")
@PASS_CONTEXT
def delete_model(ctx, namespace=None, name=None, version=None,
                 model_id=None):
    """
    Delete a model. You can delete model by two ways: \n
    1. Delete by specifying its namespace, model name and version(optional).
    For example: \n
        nsfl-ctl delete model default mnist  \n
        nsfl-ctl delete model default mnist V1  \n
    Noting: The argument 'version' is optional, if version is ignored, then
     all the versions of this model will be deleted. Otherwise will only delete
     specified version.

    2. delete by its unique model_id through the -id option.
    For example: \n
        nsfl-ctl delete model -id job_1 \n
    Noting: The unique ID value corresponds to specified version of each model.
     You can obtain the model id value through get command.
    """
    try:
        fl_model = Model(ctx.get_api_server())
        if model_id:
            fl_model.delete_model_by_id(model_id)
        else:
            if not namespace or not name:
                raise Exception("Must specify model namespace and name when "
                                "delete model.")
            fl_model.delete(namespace, name, version)

        click.echo("delete model success")

    except Exception as err:
        logging.exception(str(err))
        click.echo("Error message: %s, the detail see %s" % (
            str(err), LOG_FILE))
        sys.exit(1)
